// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: rice_yield.proto

package rice_yield

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YieldPredictionServiceClient is the client API for YieldPredictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YieldPredictionServiceClient interface {
	// Single prediction
	Predict(ctx context.Context, in *PredictionRequest, opts ...grpc.CallOption) (*PredictionResponse, error)
	GetModelInfo(ctx context.Context, in *ModelInfoRequest, opts ...grpc.CallOption) (*ModelInfoResponse, error)
}

type yieldPredictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYieldPredictionServiceClient(cc grpc.ClientConnInterface) YieldPredictionServiceClient {
	return &yieldPredictionServiceClient{cc}
}

func (c *yieldPredictionServiceClient) Predict(ctx context.Context, in *PredictionRequest, opts ...grpc.CallOption) (*PredictionResponse, error) {
	out := new(PredictionResponse)
	err := c.cc.Invoke(ctx, "/rice_yield.YieldPredictionService/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yieldPredictionServiceClient) GetModelInfo(ctx context.Context, in *ModelInfoRequest, opts ...grpc.CallOption) (*ModelInfoResponse, error) {
	out := new(ModelInfoResponse)
	err := c.cc.Invoke(ctx, "/rice_yield.YieldPredictionService/GetModelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YieldPredictionServiceServer is the server API for YieldPredictionService service.
// All implementations must embed UnimplementedYieldPredictionServiceServer
// for forward compatibility
type YieldPredictionServiceServer interface {
	// Single prediction
	Predict(context.Context, *PredictionRequest) (*PredictionResponse, error)
	GetModelInfo(context.Context, *ModelInfoRequest) (*ModelInfoResponse, error)
	mustEmbedUnimplementedYieldPredictionServiceServer()
}

// UnimplementedYieldPredictionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYieldPredictionServiceServer struct {
}

func (UnimplementedYieldPredictionServiceServer) Predict(context.Context, *PredictionRequest) (*PredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedYieldPredictionServiceServer) GetModelInfo(context.Context, *ModelInfoRequest) (*ModelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (UnimplementedYieldPredictionServiceServer) mustEmbedUnimplementedYieldPredictionServiceServer() {
}

// UnsafeYieldPredictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YieldPredictionServiceServer will
// result in compilation errors.
type UnsafeYieldPredictionServiceServer interface {
	mustEmbedUnimplementedYieldPredictionServiceServer()
}

func RegisterYieldPredictionServiceServer(s grpc.ServiceRegistrar, srv YieldPredictionServiceServer) {
	s.RegisterService(&YieldPredictionService_ServiceDesc, srv)
}

func _YieldPredictionService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YieldPredictionServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rice_yield.YieldPredictionService/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YieldPredictionServiceServer).Predict(ctx, req.(*PredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YieldPredictionService_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YieldPredictionServiceServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rice_yield.YieldPredictionService/GetModelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YieldPredictionServiceServer).GetModelInfo(ctx, req.(*ModelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YieldPredictionService_ServiceDesc is the grpc.ServiceDesc for YieldPredictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YieldPredictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rice_yield.YieldPredictionService",
	HandlerType: (*YieldPredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _YieldPredictionService_Predict_Handler,
		},
		{
			MethodName: "GetModelInfo",
			Handler:    _YieldPredictionService_GetModelInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rice_yield.proto",
}
