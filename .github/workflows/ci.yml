# Name of the workflow
name: Rice Yield Prediction CI

# When the workflow will run
on:
  # Trigger the workflow on push or pull request
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# What the workflow will do
jobs:
  # First job: check code quality
  lint:
    runs-on: ubuntu-latest # Run on ubuntu
    steps: # Steps to execute
    - uses: actions/checkout@v3 # checkout the code
    - name: Set up Python # As it says, set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.1' # Use python 3.13.1
    - name: Install dependencies # Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        pip install -r requirements.txt
    - name: Lint with flake8 # Check code quality by flake8
      run: |
        # Check only grammatical errors and undefined variables
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Only report warnings for lines longer than 127 characters, but do not fail
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Check formatting with black
      run: |
        black --check .

  # Second job: unit test
  test:
    runs-on: ubuntu-latest
    needs: lint # Run after the lint job
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.1'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
    - name: Test with pytest # Run pytest
      run: |
        pytest tests/python/ --cov=python

  # Third job: data pipeline
  data-pipeline:
    runs-on: ubuntu-latest
    needs: test # Run after the test job
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.1'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run data pipeline with sample data # Run data pipeline with sample data, as it says
      run: |
        # サンプルデータで前処理パイプラインを実行
        python -m python.data.preprocessing --data-dir=tests/data/sample --output-dir=tests/output

  # Fourth job: golang build and test
  go-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.5'
    - name: Build Go code
      run: |
        cd golang
        go build ./...
    - name: Test Go code
      run: |
        cd golang
        go test ./...